# Development Docker Compose configuration
version: '3.8'

services:
  # Main application service for development
  microplan-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: microplan-dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_HOST=0.0.0.0
      - VITE_PORT=3000
    networks:
      - microplan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (useful for future features)
  redis:
    image: redis:7-alpine
    container_name: microplan-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - microplan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for future data persistence
  postgres:
    image: postgres:16-alpine
    container_name: microplan-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=microplan_dev
      - POSTGRES_USER=microplan
      - POSTGRES_PASSWORD=microplan_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - microplan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U microplan -d microplan_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy for development
  nginx-dev:
    image: nginx:1.25-alpine
    container_name: microplan-nginx-dev
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx-dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - microplan-dev
    networks:
      - microplan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  microplan-network:
    driver: bridge
    name: microplan-network

volumes:
  postgres_data:
    driver: local
    name: microplan-postgres-data
  redis_data:
    driver: local
    name: microplan-redis-data